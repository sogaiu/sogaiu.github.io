@[{:entry 0 :event-num 0 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :thing -1) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 1 :event-num 1 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :thing :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 2 :event-num 2 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 3 :event-num 3 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (unref (sequence :open :thing :close)) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 4 :event-num 4 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :open :thing :close) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 5 :event-num 5 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :open :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 6 :event-num 6 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 7 :event-num 7 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence "[" (some "_") "]") :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 8 :event-num 8 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg "[" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 9 :exit 8 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg "[" :ret 1 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 9 :event-num 10 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg (some "_") :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 10 :event-num 11 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 12 :exit 10 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg "_" :ret 2 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 11 :event-num 13 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 2 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 14 :exit 11 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 2 :peg "_" :ret 3 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 12 :event-num 15 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 16 :exit 12 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "_" :ret :nil :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 17 :exit 9 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg (some "_") :ret 3 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 13 :event-num 18 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "]" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 19 :exit 13 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "]" :ret 4 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 20 :exit 7 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence "[" (some "_") "]") :ret 4 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 21 :exit 6 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (capture (sequence "[" (some "_") "]") :delim) :ret 4 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 22 :exit 5 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :open :ret 4 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 14 :event-num 23 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :thing :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 15 :event-num 24 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 16 :event-num 25 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (unref (sequence :open :thing :close)) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 17 :event-num 26 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence :open :thing :close) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 18 :event-num 27 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :open :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 19 :event-num 28 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 20 :event-num 29 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence "[" (some "_") "]") :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 21 :event-num 30 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg "[" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 31 :exit 21 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg "[" :ret 5 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 22 :event-num 32 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg (some "_") :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 23 :event-num 33 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg "_" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 34 :exit 23 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg "_" :ret 6 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 24 :event-num 35 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "_" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 36 :exit 24 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "_" :ret :nil :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 37 :exit 22 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg (some "_") :ret 6 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 25 :event-num 38 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "]" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 39 :exit 25 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "]" :ret 7 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 40 :exit 20 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence "[" (some "_") "]") :ret 7 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 41 :exit 19 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (capture (sequence "[" (some "_") "]") :delim) :ret 7 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 42 :exit 18 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :open :ret 7 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 26 :event-num 43 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :thing :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 27 :event-num 44 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 28 :event-num 45 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (unref (sequence :open :thing :close)) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 29 :event-num 46 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence :open :thing :close) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 30 :event-num 47 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :open :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 31 :event-num 48 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 32 :event-num 49 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence "[" (some "_") "]") :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 33 :event-num 50 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 51 :exit 33 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 52 :exit 32 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence "[" (some "_") "]") :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 53 :exit 31 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (sequence "[" (some "_") "]") :delim) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 54 :exit 30 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :open :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 55 :exit 29 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence :open :thing :close) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 56 :exit 28 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (unref (sequence :open :thing :close)) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 34 :event-num 57 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (any (if-not "[" 1))) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 35 :event-num 58 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (any (if-not "[" 1)) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 36 :event-num 59 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (if-not "[" 1) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 37 :event-num 60 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 61 :exit 37 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 38 :event-num 62 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg 1 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 63 :exit 38 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg 1 :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 64 :exit 36 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (if-not "[" 1) :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 39 :event-num 65 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (if-not "[" 1) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:entry 40 :event-num 66 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 67 :exit 40 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg "[" :ret 9 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 68 :exit 39 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (if-not "[" 1) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 69 :exit 35 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (any (if-not "[" 1)) :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0}} {:event-num 70 :exit 34 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (any (if-not "[" 1))) :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:event-num 71 :exit 27 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:event-num 72 :exit 26 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :thing :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:entry 41 :event-num 73 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg :close :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:entry 42 :event-num 74 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (capture (backmatch :delim)) :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:entry 43 :event-num 75 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (backmatch :delim) :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:event-num 76 :exit 43 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (backmatch :delim) :ret 11 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0}} {:event-num 77 :exit 42 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (capture (backmatch :delim)) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0}} {:event-num 78 :exit 41 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg :close :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0}} {:event-num 79 :exit 17 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence :open :thing :close) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0}} {:event-num 80 :exit 16 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (unref (sequence :open :thing :close)) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 81 :exit 15 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 82 :exit 14 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :thing :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 44 :event-num 83 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg :close :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 45 :event-num 84 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (capture (backmatch :delim)) :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:entry 46 :event-num 85 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (backmatch :delim) :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 86 :exit 46 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (backmatch :delim) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0}} {:event-num 87 :exit 45 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (capture (backmatch :delim)) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0}} {:event-num 88 :exit 44 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg :close :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0}} {:event-num 89 :exit 4 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :open :thing :close) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0}} {:event-num 90 :exit 3 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (unref (sequence :open :thing :close)) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 91 :exit 2 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 92 :exit 1 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :thing :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:entry 47 :event-num 93 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 15 :peg -1 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 94 :exit 47 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 15 :peg -1 :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}} {:event-num 95 :exit 0 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :thing -1) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0}}]
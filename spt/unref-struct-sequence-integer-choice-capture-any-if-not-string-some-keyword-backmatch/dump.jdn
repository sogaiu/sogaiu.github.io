@[{:event-num 0 :frame-num 0 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :thing -1) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 1 :frame-num 1 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :thing :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 2 :frame-num 2 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 3 :frame-num 3 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (unref (sequence :open :thing :close)) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 4 :frame-num 4 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :open :thing :close) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 5 :frame-num 5 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :open :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 6 :frame-num 6 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 7 :frame-num 7 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence "[" (some "_") "]") :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 8 :frame-num 8 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg "[" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 9 :frame-num 8 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg "[" :ret 1 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 10 :frame-num 9 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg (some "_") :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 11 :frame-num 10 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 12 :frame-num 10 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg "_" :ret 2 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 13 :frame-num 11 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 2 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 14 :frame-num 11 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 2 :peg "_" :ret 3 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 15 :frame-num 12 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "_" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 16 :frame-num 12 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "_" :ret :nil :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 17 :frame-num 9 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 1 :peg (some "_") :ret 3 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 18 :frame-num 13 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "]" :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 19 :frame-num 13 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 3 :peg "]" :ret 4 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 20 :frame-num 7 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence "[" (some "_") "]") :ret 4 :state @{ :captures @[] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 21 :frame-num 6 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (capture (sequence "[" (some "_") "]") :delim) :ret 4 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 22 :frame-num 5 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :open :ret 4 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 23 :frame-num 14 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :thing :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 24 :frame-num 15 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 25 :frame-num 16 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (unref (sequence :open :thing :close)) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 26 :frame-num 17 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence :open :thing :close) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 27 :frame-num 18 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :open :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 28 :frame-num 19 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 29 :frame-num 20 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence "[" (some "_") "]") :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 30 :frame-num 21 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg "[" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 31 :frame-num 21 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg "[" :ret 5 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 32 :frame-num 22 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg (some "_") :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 33 :frame-num 23 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg "_" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 34 :frame-num 23 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg "_" :ret 6 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 35 :frame-num 24 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "_" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 36 :frame-num 24 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "_" :ret :nil :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 37 :frame-num 22 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 5 :peg (some "_") :ret 6 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 38 :frame-num 25 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "]" :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 39 :frame-num 25 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 6 :peg "]" :ret 7 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 40 :frame-num 20 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence "[" (some "_") "]") :ret 7 :state @{ :captures @["[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 41 :frame-num 19 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (capture (sequence "[" (some "_") "]") :delim) :ret 7 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 42 :frame-num 18 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :open :ret 7 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 43 :frame-num 26 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :thing :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 44 :frame-num 27 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 45 :frame-num 28 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (unref (sequence :open :thing :close)) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 46 :frame-num 29 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence :open :thing :close) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 47 :frame-num 30 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :open :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 48 :frame-num 31 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (sequence "[" (some "_") "]") :delim) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 49 :frame-num 32 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence "[" (some "_") "]") :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 50 :frame-num 33 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 51 :frame-num 33 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 52 :frame-num 32 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence "[" (some "_") "]") :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 53 :frame-num 31 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (sequence "[" (some "_") "]") :delim) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 54 :frame-num 30 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :open :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 55 :frame-num 29 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (sequence :open :thing :close) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 56 :frame-num 28 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (unref (sequence :open :thing :close)) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 57 :frame-num 34 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (any (if-not "[" 1))) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 58 :frame-num 35 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (any (if-not "[" 1)) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 59 :frame-num 36 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (if-not "[" 1) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 60 :frame-num 37 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 61 :frame-num 37 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg "[" :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 62 :frame-num 38 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg 1 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 63 :frame-num 38 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg 1 :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 64 :frame-num 36 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (if-not "[" 1) :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 65 :frame-num 39 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (if-not "[" 1) :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 66 :frame-num 40 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg "[" :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :entry} {:event-num 67 :frame-num 40 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg "[" :ret 9 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 68 :frame-num 39 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (if-not "[" 1) :ret :nil :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 69 :frame-num 35 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (any (if-not "[" 1)) :ret 8 :state @{ :captures @["[__]" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]"] :tags @[:delim :delim] :text-end 15 :text-start 0} :type :exit} {:event-num 70 :frame-num 34 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (capture (any (if-not "[" 1))) :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 71 :frame-num 27 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 72 :frame-num 26 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 7 :peg :thing :ret 8 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 73 :frame-num 41 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg :close :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :entry} {:event-num 74 :frame-num 42 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (capture (backmatch :delim)) :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :entry} {:event-num 75 :frame-num 43 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (backmatch :delim) :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :entry} {:event-num 76 :frame-num 43 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (backmatch :delim) :ret 11 :state @{ :captures @["[__]" "[_]" "a"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a"] :tags @[:delim :delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 77 :frame-num 42 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg (capture (backmatch :delim)) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0} :type :exit} {:event-num 78 :frame-num 41 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 8 :peg :close :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0} :type :exit} {:event-num 79 :frame-num 17 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (sequence :open :thing :close) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[_]" "a" "[_]"] :tags @[:delim :delim nil nil] :text-end 15 :text-start 0} :type :exit} {:event-num 80 :frame-num 16 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (unref (sequence :open :thing :close)) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 81 :frame-num 15 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 82 :frame-num 14 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 4 :peg :thing :ret 11 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 83 :frame-num 44 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg :close :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 84 :frame-num 45 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (capture (backmatch :delim)) :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 85 :frame-num 46 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (backmatch :delim) :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :entry} {:event-num 86 :frame-num 46 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (backmatch :delim) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]"] :tags @[:delim] :text-end 15 :text-start 0} :type :exit} {:event-num 87 :frame-num 45 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg (capture (backmatch :delim)) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 88 :frame-num 44 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 11 :peg :close :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 89 :frame-num 4 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :open :thing :close) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @["[__]" "[__]"] :tags @[:delim nil] :text-end 15 :text-start 0} :type :exit} {:event-num 90 :frame-num 3 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (unref (sequence :open :thing :close)) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 91 :frame-num 2 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1)))) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 92 :frame-num 1 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg :thing :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 93 :frame-num 47 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 15 :peg -1 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :entry} {:event-num 94 :frame-num 47 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 15 :peg -1 :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit} {:event-num 95 :frame-num 0 :grammar @{ :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :index 0 :peg (sequence :thing -1) :ret 15 :state @{ :captures @["[__]" "[_]" "a" "[_]" "[__]"] :extrav () :grammar { :close (capture (backmatch :delim)) :main (sequence :thing -1) :open (capture (sequence "[" (some "_") "]") :delim) :thing (choice (unref (sequence :open :thing :close)) (capture (any (if-not "[" 1))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "[__][_]a[_][__]" :outer-text-end 15 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 15 :text-start 0} :type :exit}]
@[{:event-num 0 :frame-num 0 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* :tagged -1) :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 1 :frame-num 1 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg :tagged :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 2 :frame-num 2 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 3 :frame-num 3 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 4 :frame-num 4 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* :open-tag :value :close-tag) :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 5 :frame-num 5 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg :open-tag :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 6 :frame-num 6 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 7 :frame-num 7 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (constant :tag) :state @{ :captures @[] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 8 :frame-num 7 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (constant :tag) :ret 0 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 9 :frame-num 8 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg "<" :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 10 :frame-num 8 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg "<" :ret 1 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 11 :frame-num 9 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (capture :w+ :tag-name) :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 12 :frame-num 10 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg :w+ :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 13 :frame-num 11 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (some :w) :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 14 :frame-num 12 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg :w :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 15 :frame-num 13 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 16 :frame-num 13 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (range "az" "AZ" "09") :ret 2 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 17 :frame-num 12 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg :w :ret 2 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 18 :frame-num 14 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg :w :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 19 :frame-num 15 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :entry} {:event-num 20 :frame-num 15 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 21 :frame-num 14 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg :w :ret :nil :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 22 :frame-num 11 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (some :w) :ret 2 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 23 :frame-num 10 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg :w+ :ret 2 :state @{ :captures @[:tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag] :tags @[nil] :text-end 45 :text-start 0} :type :exit} {:event-num 24 :frame-num 9 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 1 :peg (capture :w+ :tag-name) :ret 2 :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 25 :frame-num 16 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg ">" :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 26 :frame-num 16 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 2 :peg ">" :ret 3 :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 27 :frame-num 6 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret 3 :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 28 :frame-num 5 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg :open-tag :ret 3 :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 29 :frame-num 17 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :value :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 30 :frame-num 18 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 31 :frame-num 19 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (constant :value) :state @{ :captures @[:tag "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p"] :tags @[nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 32 :frame-num 19 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (constant :value) :ret 3 :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 33 :frame-num 20 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (group (any (+ :tagged :untagged))) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 34 :frame-num 21 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (any (+ :tagged :untagged)) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 35 :frame-num 22 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 36 :frame-num 23 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :tagged :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 37 :frame-num 24 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 38 :frame-num 25 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 39 :frame-num 26 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 40 :frame-num 27 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :open-tag :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 41 :frame-num 28 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 42 :frame-num 29 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (constant :tag) :state @{ :captures @[:tag "p" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 43 :frame-num 29 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (constant :tag) :ret 3 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 44 :frame-num 30 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg "<" :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 45 :frame-num 30 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg "<" :ret 4 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 46 :frame-num 31 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (capture :w+ :tag-name) :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 47 :frame-num 32 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg :w+ :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 48 :frame-num 33 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (some :w) :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 49 :frame-num 34 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg :w :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 50 :frame-num 35 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 51 :frame-num 35 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (range "az" "AZ" "09") :ret 5 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 52 :frame-num 34 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg :w :ret 5 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 53 :frame-num 36 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 5 :peg :w :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 54 :frame-num 37 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 5 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 55 :frame-num 37 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 5 :peg (range "az" "AZ" "09") :ret 6 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 56 :frame-num 36 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 5 :peg :w :ret 6 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 57 :frame-num 38 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg :w :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 58 :frame-num 39 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 59 :frame-num 39 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 60 :frame-num 38 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 61 :frame-num 33 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (some :w) :ret 6 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 62 :frame-num 32 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg :w+ :ret 6 :state @{ :captures @[:tag "p" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 63 :frame-num 31 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 4 :peg (capture :w+ :tag-name) :ret 6 :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 64 :frame-num 40 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg ">" :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 65 :frame-num 40 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 6 :peg ">" :ret 7 :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 66 :frame-num 28 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret 7 :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 67 :frame-num 27 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :open-tag :ret 7 :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 68 :frame-num 41 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :value :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 69 :frame-num 42 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 70 :frame-num 43 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (constant :value) :state @{ :captures @[:tag "p" :value :tag "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em"] :tags @[nil :tag-name nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 71 :frame-num 43 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (constant :value) :ret 7 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 72 :frame-num 44 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (group (any (+ :tagged :untagged))) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 73 :frame-num 45 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (any (+ :tagged :untagged)) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 74 :frame-num 46 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 75 :frame-num 47 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :tagged :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 76 :frame-num 48 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 77 :frame-num 49 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 78 :frame-num 50 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 79 :frame-num 51 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :open-tag :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 80 :frame-num 52 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 81 :frame-num 53 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (constant :tag) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 82 :frame-num 53 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (constant :tag) :ret 7 :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 83 :frame-num 54 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 84 :frame-num 54 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 85 :frame-num 52 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 86 :frame-num 51 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 87 :frame-num 50 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 88 :frame-num 49 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 89 :frame-num 48 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 90 :frame-num 47 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value :tag] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 91 :frame-num 55 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :untagged :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 92 :frame-num 56 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 93 :frame-num 57 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 94 :frame-num 58 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 95 :frame-num 59 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 96 :frame-num 59 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 97 :frame-num 60 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg 1 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 98 :frame-num 60 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg 1 :ret 8 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 99 :frame-num 58 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (if-not "<" 1) :ret 8 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 100 :frame-num 61 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 101 :frame-num 62 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 102 :frame-num 62 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 103 :frame-num 63 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg 1 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 104 :frame-num 63 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg 1 :ret 9 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 105 :frame-num 61 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 8 :peg (if-not "<" 1) :ret 9 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 106 :frame-num 64 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 107 :frame-num 65 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 108 :frame-num 65 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 109 :frame-num 66 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg 1 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 110 :frame-num 66 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg 1 :ret 10 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 111 :frame-num 64 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 9 :peg (if-not "<" 1) :ret 10 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 112 :frame-num 67 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 113 :frame-num 68 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 114 :frame-num 68 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 115 :frame-num 69 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg 1 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 116 :frame-num 69 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg 1 :ret 11 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 117 :frame-num 67 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 10 :peg (if-not "<" 1) :ret 11 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 118 :frame-num 70 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 119 :frame-num 71 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 120 :frame-num 71 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 121 :frame-num 72 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg 1 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 122 :frame-num 72 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg 1 :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 123 :frame-num 70 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 11 :peg (if-not "<" 1) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 124 :frame-num 73 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 125 :frame-num 74 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 126 :frame-num 74 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :ret 13 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 127 :frame-num 73 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 128 :frame-num 57 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (some (if-not "<" 1)) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value] :tags @[nil :tag-name nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 129 :frame-num 56 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (capture (some (if-not "<" 1))) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 130 :frame-num 55 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :untagged :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 131 :frame-num 46 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (+ :tagged :untagged) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 132 :frame-num 75 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 133 :frame-num 76 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :tagged :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 134 :frame-num 77 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 135 :frame-num 78 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 136 :frame-num 79 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 137 :frame-num 80 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :open-tag :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 138 :frame-num 81 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 139 :frame-num 82 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (constant :tag) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 140 :frame-num 82 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (constant :tag) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 141 :frame-num 83 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 142 :frame-num 83 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :ret 13 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 143 :frame-num 84 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (capture :w+ :tag-name) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 144 :frame-num 85 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg :w+ :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 145 :frame-num 86 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (some :w) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 146 :frame-num 87 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg :w :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 147 :frame-num 88 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 148 :frame-num 88 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 149 :frame-num 87 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 150 :frame-num 86 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (some :w) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 151 :frame-num 85 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg :w+ :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 152 :frame-num 84 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 13 :peg (capture :w+ :tag-name) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 153 :frame-num 81 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 154 :frame-num 80 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 155 :frame-num 79 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 156 :frame-num 78 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 157 :frame-num 77 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 158 :frame-num 76 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" :tag] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 159 :frame-num 89 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :untagged :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 160 :frame-num 90 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 161 :frame-num 91 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 162 :frame-num 92 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 163 :frame-num 93 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 164 :frame-num 93 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "<" :ret 13 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 165 :frame-num 92 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 166 :frame-num 91 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (some (if-not "<" 1)) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 167 :frame-num 90 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (capture (some (if-not "<" 1))) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 168 :frame-num 89 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :untagged :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 169 :frame-num 75 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (+ :tagged :untagged) :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 170 :frame-num 45 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (any (+ :tagged :untagged)) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value "Hello"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello"] :tags @[nil :tag-name nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 171 :frame-num 44 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (group (any (+ :tagged :untagged))) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 172 :frame-num 42 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 173 :frame-num 41 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 7 :peg :value :ret 12 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 174 :frame-num 94 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :close-tag :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 175 :frame-num 95 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 176 :frame-num 96 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 177 :frame-num 97 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "</" :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 178 :frame-num 97 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg "</" :ret 14 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 179 :frame-num 98 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 180 :frame-num 99 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (* (backref :tag-name) (capture :w+)) :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 181 :frame-num 100 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (backref :tag-name) :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 182 :frame-num 100 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (backref :tag-name) :ret 14 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 183 :frame-num 101 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (capture :w+) :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 184 :frame-num 102 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg :w+ :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 185 :frame-num 103 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (some :w) :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 186 :frame-num 104 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg :w :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 187 :frame-num 105 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 188 :frame-num 105 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (range "az" "AZ" "09") :ret 15 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 189 :frame-num 104 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg :w :ret 15 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 190 :frame-num 106 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 15 :peg :w :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 191 :frame-num 107 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 15 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 192 :frame-num 107 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 15 :peg (range "az" "AZ" "09") :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 193 :frame-num 106 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 15 :peg :w :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 194 :frame-num 108 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg :w :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 195 :frame-num 109 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 196 :frame-num 109 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 197 :frame-num 108 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 198 :frame-num 103 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (some :w) :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 199 :frame-num 102 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg :w+ :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] "em"] :tags @[nil :tag-name nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 200 :frame-num 101 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (capture :w+) :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em" "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em"] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 201 :frame-num 99 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (* (backref :tag-name) (capture :w+)) :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] "em" "em"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em"] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 202 :frame-num 98 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 14 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :ret 16 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em" true] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 203 :frame-num 110 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg ">" :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em" true] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 204 :frame-num 110 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 16 :peg ">" :ret 17 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em" true] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 205 :frame-num 96 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :ret 17 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value :tag "em" :value "Hello" @["Hello"] "em" "em" true] :tags @[ nil :tag-name nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 206 :frame-num 95 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :ret 17 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 207 :frame-num 94 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 12 :peg :close-tag :ret 17 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 208 :frame-num 26 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* :open-tag :value :close-tag) :ret 17 :state @{ :captures @[:tag "p" :value :tag "em" :value @["Hello"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"]] :tags @[nil :tag-name nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 209 :frame-num 25 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret 17 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag "em" :value "Hello" @["Hello"] {:tag "em" :value @["Hello"]}] :tags @[nil :tag-name nil nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 210 :frame-num 24 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret 17 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 211 :frame-num 23 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :tagged :ret 17 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 212 :frame-num 22 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (+ :tagged :untagged) :ret 17 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 213 :frame-num 111 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 214 :frame-num 112 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 215 :frame-num 113 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 216 :frame-num 114 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 217 :frame-num 115 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 218 :frame-num 116 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 219 :frame-num 117 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 220 :frame-num 118 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 221 :frame-num 118 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (constant :tag) :ret 17 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 222 :frame-num 119 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 223 :frame-num 119 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 224 :frame-num 117 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 225 :frame-num 116 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 226 :frame-num 115 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 227 :frame-num 114 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 228 :frame-num 113 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 229 :frame-num 112 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value :tag] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 230 :frame-num 120 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :untagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 231 :frame-num 121 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 232 :frame-num 122 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 233 :frame-num 123 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 234 :frame-num 124 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 235 :frame-num 124 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 236 :frame-num 125 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 237 :frame-num 125 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg 1 :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 238 :frame-num 123 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (if-not "<" 1) :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 239 :frame-num 126 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 240 :frame-num 127 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 241 :frame-num 127 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg "<" :ret 19 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 242 :frame-num 126 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 243 :frame-num 122 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (some (if-not "<" 1)) :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value] :tags @[nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 244 :frame-num 121 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (capture (some (if-not "<" 1))) :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 245 :frame-num 120 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg :untagged :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 246 :frame-num 111 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 17 :peg (+ :tagged :untagged) :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 247 :frame-num 128 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 248 :frame-num 129 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 249 :frame-num 130 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 250 :frame-num 131 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 251 :frame-num 132 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 252 :frame-num 133 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 253 :frame-num 134 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 254 :frame-num 135 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " "] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 255 :frame-num 135 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (constant :tag) :ret 18 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 256 :frame-num 136 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 257 :frame-num 136 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg "<" :ret 19 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 258 :frame-num 137 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (capture :w+ :tag-name) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 259 :frame-num 138 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg :w+ :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 260 :frame-num 139 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (some :w) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 261 :frame-num 140 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 262 :frame-num 141 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 263 :frame-num 141 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (range "az" "AZ" "09") :ret 20 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 264 :frame-num 140 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg :w :ret 20 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 265 :frame-num 142 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 20 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 266 :frame-num 143 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 20 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 267 :frame-num 143 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 20 :peg (range "az" "AZ" "09") :ret 21 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 268 :frame-num 142 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 20 :peg :w :ret 21 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 269 :frame-num 144 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 21 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 270 :frame-num 145 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 21 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 271 :frame-num 145 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 21 :peg (range "az" "AZ" "09") :ret 22 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 272 :frame-num 144 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 21 :peg :w :ret 22 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 273 :frame-num 146 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 22 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 274 :frame-num 147 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 22 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 275 :frame-num 147 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 22 :peg (range "az" "AZ" "09") :ret 23 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 276 :frame-num 146 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 22 :peg :w :ret 23 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 277 :frame-num 148 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 23 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 278 :frame-num 149 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 23 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 279 :frame-num 149 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 23 :peg (range "az" "AZ" "09") :ret 24 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 280 :frame-num 148 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 23 :peg :w :ret 24 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 281 :frame-num 150 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 24 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 282 :frame-num 151 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 24 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 283 :frame-num 151 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 24 :peg (range "az" "AZ" "09") :ret 25 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 284 :frame-num 150 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 24 :peg :w :ret 25 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 285 :frame-num 152 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 286 :frame-num 153 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 287 :frame-num 153 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 288 :frame-num 152 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 289 :frame-num 139 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (some :w) :ret 25 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 290 :frame-num 138 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg :w+ :ret 25 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 291 :frame-num 137 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 19 :peg (capture :w+ :tag-name) :ret 25 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 292 :frame-num 154 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg ">" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 293 :frame-num 154 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 25 :peg ">" :ret 26 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 294 :frame-num 134 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret 26 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 295 :frame-num 133 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg :open-tag :ret 26 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 296 :frame-num 155 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :value :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 297 :frame-num 156 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 298 :frame-num 157 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (constant :value) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong"] :tags @[nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 299 :frame-num 157 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (constant :value) :ret 26 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 300 :frame-num 158 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (group (any (+ :tagged :untagged))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 301 :frame-num 159 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (any (+ :tagged :untagged)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 302 :frame-num 160 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 303 :frame-num 161 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 304 :frame-num 162 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 305 :frame-num 163 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 306 :frame-num 164 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 307 :frame-num 165 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 308 :frame-num 166 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 309 :frame-num 167 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 310 :frame-num 167 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (constant :tag) :ret 26 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 311 :frame-num 168 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 312 :frame-num 168 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 313 :frame-num 166 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 314 :frame-num 165 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 315 :frame-num 164 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 316 :frame-num 163 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 317 :frame-num 162 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 318 :frame-num 161 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 319 :frame-num 169 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :untagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 320 :frame-num 170 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 321 :frame-num 171 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 322 :frame-num 172 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 323 :frame-num 173 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 324 :frame-num 173 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 325 :frame-num 174 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 326 :frame-num 174 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg 1 :ret 27 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 327 :frame-num 172 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (if-not "<" 1) :ret 27 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 328 :frame-num 175 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 329 :frame-num 176 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 330 :frame-num 176 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 331 :frame-num 177 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 332 :frame-num 177 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg 1 :ret 28 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 333 :frame-num 175 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 27 :peg (if-not "<" 1) :ret 28 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 334 :frame-num 178 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 335 :frame-num 179 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 336 :frame-num 179 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 337 :frame-num 180 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 338 :frame-num 180 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg 1 :ret 29 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 339 :frame-num 178 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 28 :peg (if-not "<" 1) :ret 29 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 340 :frame-num 181 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 341 :frame-num 182 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 342 :frame-num 182 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 343 :frame-num 183 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 344 :frame-num 183 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg 1 :ret 30 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 345 :frame-num 181 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 29 :peg (if-not "<" 1) :ret 30 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 346 :frame-num 184 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 347 :frame-num 185 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 348 :frame-num 185 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 349 :frame-num 186 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 350 :frame-num 186 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg 1 :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 351 :frame-num 184 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 30 :peg (if-not "<" 1) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 352 :frame-num 187 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 353 :frame-num 188 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :entry} {:event-num 354 :frame-num 188 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :ret 32 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 355 :frame-num 187 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 356 :frame-num 171 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (some (if-not "<" 1)) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value] :tags @[nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 357 :frame-num 170 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (capture (some (if-not "<" 1))) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 358 :frame-num 169 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :untagged :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 359 :frame-num 160 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (+ :tagged :untagged) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 360 :frame-num 189 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 361 :frame-num 190 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 362 :frame-num 191 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 363 :frame-num 192 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 364 :frame-num 193 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 365 :frame-num 194 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 366 :frame-num 195 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 367 :frame-num 196 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 368 :frame-num 196 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (constant :tag) :ret 31 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 369 :frame-num 197 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 370 :frame-num 197 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :ret 32 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 371 :frame-num 198 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (capture :w+ :tag-name) :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 372 :frame-num 199 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg :w+ :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 373 :frame-num 200 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (some :w) :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 374 :frame-num 201 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 375 :frame-num 202 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 376 :frame-num 202 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 377 :frame-num 201 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg :w :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 378 :frame-num 200 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (some :w) :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 379 :frame-num 199 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg :w+ :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 380 :frame-num 198 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 32 :peg (capture :w+ :tag-name) :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 381 :frame-num 195 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 382 :frame-num 194 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :open-tag :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 383 :frame-num 193 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 384 :frame-num 192 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 385 :frame-num 191 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 386 :frame-num 190 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :tagged :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" :tag] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 387 :frame-num 203 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :untagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 388 :frame-num 204 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 389 :frame-num 205 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 390 :frame-num 206 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 391 :frame-num 207 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 392 :frame-num 207 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "<" :ret 32 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 393 :frame-num 206 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 394 :frame-num 205 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (some (if-not "<" 1)) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 395 :frame-num 204 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (capture (some (if-not "<" 1))) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 396 :frame-num 203 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :untagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 397 :frame-num 189 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (+ :tagged :untagged) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 398 :frame-num 159 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (any (+ :tagged :untagged)) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value "world"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world"] :tags @[nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 399 :frame-num 158 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (group (any (+ :tagged :untagged))) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 400 :frame-num 156 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 401 :frame-num 155 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 26 :peg :value :ret 31 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 402 :frame-num 208 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :close-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 403 :frame-num 209 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 404 :frame-num 210 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 405 :frame-num 211 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "</" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 406 :frame-num 211 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg "</" :ret 33 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 407 :frame-num 212 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 408 :frame-num 213 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (* (backref :tag-name) (capture :w+)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 409 :frame-num 214 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (backref :tag-name) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 410 :frame-num 214 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (backref :tag-name) :ret 33 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 411 :frame-num 215 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (capture :w+) :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 412 :frame-num 216 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg :w+ :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 413 :frame-num 217 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (some :w) :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 414 :frame-num 218 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 415 :frame-num 219 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 416 :frame-num 219 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (range "az" "AZ" "09") :ret 34 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 417 :frame-num 218 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg :w :ret 34 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 418 :frame-num 220 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 34 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 419 :frame-num 221 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 34 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 420 :frame-num 221 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 34 :peg (range "az" "AZ" "09") :ret 35 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 421 :frame-num 220 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 34 :peg :w :ret 35 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 422 :frame-num 222 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 35 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 423 :frame-num 223 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 35 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 424 :frame-num 223 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 35 :peg (range "az" "AZ" "09") :ret 36 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 425 :frame-num 222 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 35 :peg :w :ret 36 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 426 :frame-num 224 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 36 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 427 :frame-num 225 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 36 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 428 :frame-num 225 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 36 :peg (range "az" "AZ" "09") :ret 37 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 429 :frame-num 224 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 36 :peg :w :ret 37 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 430 :frame-num 226 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 37 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 431 :frame-num 227 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 37 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 432 :frame-num 227 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 37 :peg (range "az" "AZ" "09") :ret 38 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 433 :frame-num 226 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 37 :peg :w :ret 38 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 434 :frame-num 228 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 38 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 435 :frame-num 229 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 38 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 436 :frame-num 229 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 38 :peg (range "az" "AZ" "09") :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 437 :frame-num 228 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 38 :peg :w :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 438 :frame-num 230 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg :w :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 439 :frame-num 231 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg (range "az" "AZ" "09") :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 440 :frame-num 231 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 441 :frame-num 230 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg :w :ret :nil :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 442 :frame-num 217 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (some :w) :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 443 :frame-num 216 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg :w+ :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 444 :frame-num 215 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (capture :w+) :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong" "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 445 :frame-num 213 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (* (backref :tag-name) (capture :w+)) :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] "strong" "strong"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong"] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 446 :frame-num 212 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 33 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :ret 39 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong" true] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 447 :frame-num 232 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg ">" :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong" true] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 448 :frame-num 232 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 39 :peg ">" :ret 40 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong" true] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 449 :frame-num 210 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :ret 40 :state @{ :captures @[ :tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] "strong" "strong" true] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 450 :frame-num 209 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 451 :frame-num 208 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 31 :peg :close-tag :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 452 :frame-num 132 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (* :open-tag :value :close-tag) :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " :tag "strong" :value @["world"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag "strong" :value "world" @["world"]] :tags @[nil :tag-name nil nil nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 453 :frame-num 131 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[ :tag "p" :value " " :tag "strong" :value "world" @["world"] {:tag "strong" :value @["world"]}] :tags @[ nil :tag-name nil nil nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 454 :frame-num 130 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 455 :frame-num 129 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg :tagged :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 456 :frame-num 128 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 18 :peg (+ :tagged :untagged) :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 457 :frame-num 233 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 458 :frame-num 234 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 459 :frame-num 235 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 460 :frame-num 236 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 461 :frame-num 237 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 462 :frame-num 238 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 463 :frame-num 239 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 464 :frame-num 240 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 465 :frame-num 240 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (constant :tag) :ret 40 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 466 :frame-num 241 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 467 :frame-num 241 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 468 :frame-num 239 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 469 :frame-num 238 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 470 :frame-num 237 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 471 :frame-num 236 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 472 :frame-num 235 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 473 :frame-num 234 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " :tag] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 474 :frame-num 242 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :untagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 475 :frame-num 243 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 476 :frame-num 244 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 477 :frame-num 245 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 478 :frame-num 246 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 479 :frame-num 246 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg "<" :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 480 :frame-num 247 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg 1 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 481 :frame-num 247 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg 1 :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 482 :frame-num 245 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (if-not "<" 1) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 483 :frame-num 248 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 484 :frame-num 249 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 485 :frame-num 249 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :ret 42 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 486 :frame-num 248 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 487 :frame-num 244 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (some (if-not "<" 1)) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " "] :tags @[nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 488 :frame-num 243 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (capture (some (if-not "<" 1))) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 489 :frame-num 242 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg :untagged :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 490 :frame-num 233 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 40 :peg (+ :tagged :untagged) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 491 :frame-num 250 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (+ :tagged :untagged) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 492 :frame-num 251 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :tagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 493 :frame-num 252 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 494 :frame-num 253 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 495 :frame-num 254 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* :open-tag :value :close-tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 496 :frame-num 255 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :open-tag :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 497 :frame-num 256 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 498 :frame-num 257 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (constant :tag) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 499 :frame-num 257 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (constant :tag) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 500 :frame-num 258 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 501 :frame-num 258 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :ret 42 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 502 :frame-num 259 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (capture :w+ :tag-name) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 503 :frame-num 260 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg :w+ :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 504 :frame-num 261 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (some :w) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 505 :frame-num 262 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg :w :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 506 :frame-num 263 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 507 :frame-num 263 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 508 :frame-num 262 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 509 :frame-num 261 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (some :w) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 510 :frame-num 260 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg :w+ :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 511 :frame-num 259 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 42 :peg (capture :w+ :tag-name) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 512 :frame-num 256 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* (constant :tag) "<" (capture :w+ :tag-name) ">") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 513 :frame-num 255 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :open-tag :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 514 :frame-num 254 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* :open-tag :value :close-tag) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 515 :frame-num 253 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 516 :frame-num 252 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 517 :frame-num 251 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :tagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!" :tag] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" :tag] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 518 :frame-num 264 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :untagged :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 519 :frame-num 265 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (capture (some (if-not "<" 1))) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 520 :frame-num 266 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (some (if-not "<" 1)) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 521 :frame-num 267 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (if-not "<" 1) :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 522 :frame-num 268 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 523 :frame-num 268 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "<" :ret 42 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 524 :frame-num 267 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (if-not "<" 1) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 525 :frame-num 266 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (some (if-not "<" 1)) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 526 :frame-num 265 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (capture (some (if-not "<" 1))) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 527 :frame-num 264 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :untagged :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 528 :frame-num 250 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (+ :tagged :untagged) :ret :nil :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 529 :frame-num 21 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (any (+ :tagged :untagged)) :ret 41 :state @{ :captures @[:tag "p" :value {:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!"] :tags @[nil :tag-name nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 530 :frame-num 20 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (group (any (+ :tagged :untagged))) :ret 41 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 531 :frame-num 18 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg (* (constant :value) (group (any (+ :tagged :untagged)))) :ret 41 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 532 :frame-num 17 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 3 :peg :value :ret 41 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 533 :frame-num 269 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :close-tag :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 534 :frame-num 270 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 535 :frame-num 271 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 536 :frame-num 272 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "</" :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 537 :frame-num 272 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg "</" :ret 43 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 538 :frame-num 273 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 539 :frame-num 274 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (* (backref :tag-name) (capture :w+)) :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 540 :frame-num 275 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (backref :tag-name) :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 541 :frame-num 275 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (backref :tag-name) :ret 43 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 542 :frame-num 276 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (capture :w+) :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 543 :frame-num 277 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg :w+ :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 544 :frame-num 278 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (some :w) :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 545 :frame-num 279 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg :w :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 546 :frame-num 280 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 547 :frame-num 280 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (range "az" "AZ" "09") :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 548 :frame-num 279 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg :w :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 549 :frame-num 281 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg :w :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 550 :frame-num 282 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg (range "az" "AZ" "09") :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :entry} {:event-num 551 :frame-num 282 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg (range "az" "AZ" "09") :ret :nil :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 552 :frame-num 281 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg :w :ret :nil :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 553 :frame-num 278 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (some :w) :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 554 :frame-num 277 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg :w+ :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p"] :tags @[nil :tag-name nil nil nil nil :tag-name] :text-end 45 :text-start 0} :type :exit} {:event-num 555 :frame-num 276 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (capture :w+) :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p"] :tags @[nil :tag-name nil nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 556 :frame-num 274 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (* (backref :tag-name) (capture :w+)) :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p"] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p"] :tags @[nil :tag-name nil nil nil nil :tag-name nil] :text-end 45 :text-start 0} :type :exit} {:event-num 557 :frame-num 273 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 43 :peg (cmt (* (backref :tag-name) (capture :w+)) "<function =>") :ret 44 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p" true] :tags @[nil :tag-name nil nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 558 :frame-num 283 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg ">" :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p" true] :tags @[nil :tag-name nil nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :entry} {:event-num 559 :frame-num 283 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 44 :peg ">" :ret 45 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p" true] :tags @[nil :tag-name nil nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 560 :frame-num 271 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">") :ret 45 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] true] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] "p" "p" true] :tags @[nil :tag-name nil nil nil nil :tag-name nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 561 :frame-num 270 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :ret 45 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 562 :frame-num 269 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 41 :peg :close-tag :ret 45 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 563 :frame-num 4 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* :open-tag :value :close-tag) :ret 45 :state @{ :captures @[:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]] :tags @[nil :tag-name nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 564 :frame-num 3 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (replace (* :open-tag :value :close-tag) "<cfunction struct>") :ret 45 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[:tag "p" :value " " "!" @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"] {:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :tags @[nil :tag-name nil nil nil nil nil] :text-end 45 :text-start 0} :type :exit} {:event-num 565 :frame-num 2 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :ret 45 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :exit} {:event-num 566 :frame-num 1 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg :tagged :ret 45 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :exit} {:event-num 567 :frame-num 284 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 45 :peg -1 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :entry} {:event-num 568 :frame-num 284 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 45 :peg -1 :ret 45 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :exit} {:event-num 569 :frame-num 0 :grammar @{ :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :index 0 :peg (* :tagged -1) :ret 45 :state @{ :captures @[{:tag "p" :value @[{:tag "em" :value @["Hello"]} " " {:tag "strong" :value @["world"]} "!"]}] :extrav () :grammar { :close-tag (drop (* "</" (cmt (* (backref :tag-name) (capture :w+)) "<function =>") ">")) :main (* :tagged -1) :open-tag (* (constant :tag) "<" (capture :w+ :tag-name) ">") :tagged (unref (replace (* :open-tag :value :close-tag) "<cfunction struct>")) :untagged (capture (some (if-not "<" 1))) :value (* (constant :value) (group (any (+ :tagged :untagged))))} :has-backref true :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "<p><em>Hello</em> <strong>world</strong>!</p>" :outer-text-end 45 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 45 :text-start 0} :type :exit}]
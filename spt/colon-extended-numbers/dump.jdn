@[{:event-num 0 :frame-num 0 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 1 :frame-num 1 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az")))) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 2 :frame-num 2 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (cmt (capture (some :num-char)) "<cfunction scan-number>") :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 3 :frame-num 3 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (capture (some :num-char)) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 4 :frame-num 4 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (some :num-char) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 5 :frame-num 5 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg :num-char :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 6 :frame-num 6 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (choice (range "09" "AZ" "az") (set "&+-_")) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 7 :frame-num 7 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (range "09" "AZ" "az") :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 8 :frame-num 7 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (range "09" "AZ" "az") :ret 1 :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 9 :frame-num 6 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (choice (range "09" "AZ" "az") (set "&+-_")) :ret 1 :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 10 :frame-num 5 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg :num-char :ret 1 :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 11 :frame-num 8 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg :num-char :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 12 :frame-num 9 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (choice (range "09" "AZ" "az") (set "&+-_")) :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 13 :frame-num 10 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (range "09" "AZ" "az") :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 14 :frame-num 10 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (range "09" "AZ" "az") :ret :nil :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 15 :frame-num 11 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (set "&+-_") :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 16 :frame-num 11 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (set "&+-_") :ret :nil :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 17 :frame-num 9 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (choice (range "09" "AZ" "az") (set "&+-_")) :ret :nil :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 18 :frame-num 8 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg :num-char :ret :nil :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 19 :frame-num 4 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (some :num-char) :ret 1 :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 20 :frame-num 3 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (capture (some :num-char)) :ret 1 :state @{ :captures @["2"] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 21 :frame-num 2 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (cmt (capture (some :num-char)) "<cfunction scan-number>") :ret 1 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 22 :frame-num 12 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (opt (sequence ":" (range "AZ" "az"))) :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 23 :frame-num 13 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (sequence ":" (range "AZ" "az")) :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 24 :frame-num 14 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg ":" :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 25 :frame-num 14 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg ":" :ret 2 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 26 :frame-num 15 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 2 :peg (range "AZ" "az") :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :entry} {:event-num 27 :frame-num 15 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 2 :peg (range "AZ" "az") :ret 3 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 28 :frame-num 13 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (sequence ":" (range "AZ" "az")) :ret 3 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 29 :frame-num 12 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 1 :peg (opt (sequence ":" (range "AZ" "az"))) :ret 3 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 30 :frame-num 1 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az")))) :ret 3 :state @{ :captures @[2] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit} {:event-num 31 :frame-num 0 :grammar @{:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :index 0 :peg (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :ret 3 :state @{ :captures @[] :extrav () :grammar {:main (drop (sequence (cmt (capture (some :num-char)) "<cfunction scan-number>") (opt (sequence ":" (range "AZ" "az"))))) :num-char (choice (range "09" "AZ" "az") (set "&+-_"))} :has-backref false :linemap @[] :linemaplen -1 :mode :peg-mode-normal :original-text "2:u" :outer-text-end 3 :scratch @"" :start 0 :tagged-captures @[] :tags @[] :text-end 3 :text-start 0} :type :exit}]